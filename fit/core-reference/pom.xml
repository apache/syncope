<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache.syncope</groupId>
    <artifactId>syncope-fit</artifactId>
    <version>3.0.0-SNAPSHOT</version>
  </parent>

  <name>Apache Syncope FIT Core Reference</name>
  <description>Apache Syncope FIT Core Reference</description>
  <groupId>org.apache.syncope.fit</groupId>
  <artifactId>syncope-fit-core-reference</artifactId>
  <packaging>war</packaging>
  
  <properties>
    <ianal.skip>true</ianal.skip>

    <jdbcdriver.groupId>com.h2database</jdbcdriver.groupId>
    <jdbcdriver.artifactId>h2</jdbcdriver.artifactId>

    <obscureSecretKey>obscureSecretKeyValue</obscureSecretKey>

    <rootpom.basedir>${basedir}/../..</rootpom.basedir>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.apache.syncope.core</groupId>
      <artifactId>syncope-core-starter</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.core.idm</groupId>
      <artifactId>syncope-core-idm-rest-cxf</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.core.am</groupId>
      <artifactId>syncope-core-am-rest-cxf</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.syncope.ext.self-keymaster</groupId>
      <artifactId>syncope-ext-self-keymaster-rest-cxf</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.self-keymaster</groupId>
      <artifactId>syncope-ext-self-keymaster-persistence-jpa</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.common.keymaster</groupId>
      <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>
      <version>${project.version}</version>
    </dependency>

    <!-- TEST -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.fit</groupId>
      <artifactId>syncope-fit-build-tools</artifactId>
      <version>${project.version}</version>
      <type>war</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.client.idm</groupId>
      <artifactId>syncope-client-idm-lib</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.self-keymaster</groupId>
      <artifactId>syncope-ext-self-keymaster-client</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.client.am</groupId>
      <artifactId>syncope-client-am-lib</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.client.idm</groupId>
      <artifactId>syncope-client-idm-console</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>cglib</groupId>
          <artifactId>cglib</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.ow2.asm</groupId>
          <artifactId>asm-util</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.client.idrepo</groupId>
      <artifactId>syncope-client-idrepo-enduser</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.flowable</groupId>
      <artifactId>syncope-ext-flowable-rest-cxf</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>          
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.flowable</groupId>
      <artifactId>syncope-ext-flowable-client-console</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.flowable</groupId>
      <artifactId>syncope-ext-flowable-client-enduser</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.camel</groupId>
      <artifactId>syncope-ext-camel-rest-cxf</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>          
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.camel</groupId>
      <artifactId>syncope-ext-camel-client-console</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>  
    <dependency>
      <groupId>org.apache.syncope.ext.saml2sp</groupId>
      <artifactId>syncope-ext-saml2sp-rest-cxf</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>          
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.saml2sp</groupId>
      <artifactId>syncope-ext-saml2sp-client-console</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.scimv2</groupId>
      <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.scimv2</groupId>
      <artifactId>syncope-ext-scimv2-scim-rest-cxf</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.scimv2</groupId>
      <artifactId>syncope-ext-scimv2-client-console</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.oidcclient</groupId>
      <artifactId>syncope-ext-oidcclient-rest-cxf</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>          
    </dependency>
    <dependency>
      <groupId>org.apache.syncope.ext.oidcclient</groupId>
      <artifactId>syncope-ext-oidcclient-client-console</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-client</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcpkix-jdk15on</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcprov-jdk15on</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <inherited>true</inherited>
        <executions>
          <execution>
            <id>set-bundles</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <inherited>true</inherited>
        <executions>
          <execution>
            <id>setupCSV</id>
            <phase>pre-integration-test</phase>
            <configuration>
              <target>
                <copy file="${project.build.directory}/test-classes/test.csv" todir="${test.csvdir.path}" overwrite="true" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <inherited>true</inherited>
        <configuration>
          <systemPropertyVariables>
            <jaxrsContentType>${jaxrs.content.type}</jaxrsContentType>
            <obscureSecretKey>${obscureSecretKey}</obscureSecretKey>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <inherited>true</inherited>
        <configuration>
          <systemPropertyVariables>
            <jaxrsContentType>${jaxrs.content.type}</jaxrsContentType>
            <obscureSecretKey>${obscureSecretKey}</obscureSecretKey>
          </systemPropertyVariables>
        </configuration>
        <executions>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <inherited>true</inherited>
        <configuration>
          <container>
            <containerId>tomcat9x</containerId>
            <zipUrlInstaller>
              <url>https://repo1.maven.org/maven2/org/apache/tomcat/tomcat/${tomcat.version}/tomcat-${tomcat.version}.zip</url>
              <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>
              <extractDir>${project.build.directory}/cargo/extract</extractDir>
            </zipUrlInstaller>
            <timeout>300000</timeout>
            <log>${cargo.log}</log>
            <output>${cargo.output}</output>
            <systemProperties>
              <java.security.egd>file:/dev/./urandom</java.security.egd>
              <java.util.secureRandomSeed>true</java.util.secureRandomSeed>
              
              <obscureSecretKey>${obscureSecretKey}</obscureSecretKey>
            </systemProperties>
            <dependencies>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
              </dependency>
              <dependency>
                <groupId>${jdbcdriver.groupId}</groupId>
                <artifactId>${jdbcdriver.artifactId}</artifactId>
              </dependency>
            </dependencies>
          </container>
          <configuration>
            <properties>
              <cargo.jvmargs>
                -Dspring.profiles.active=embedded
                -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx1024m -Xms512m</cargo.jvmargs>
            </properties>
          </configuration>
          <deployables>
            <deployable>
              <groupId>org.apache.syncope.fit</groupId>
              <artifactId>syncope-fit-build-tools</artifactId>
              <type>war</type>
              <properties>
                <context>syncope-fit-build-tools</context>
              </properties>
            </deployable>
            <deployable>
              <location>${project.build.directory}/${project.build.finalName}</location>
              <pingURL>http://localhost:${cargo.servlet.port}/syncope/index.html</pingURL>
              <pingTimeout>${cargo.deployable.ping.timeout}</pingTimeout>
              <properties>
                <context>syncope</context>
              </properties>
            </deployable>
          </deployables>
        </configuration>
        <executions>
          <execution>
            <id>start-container</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <skip>${skipTests}</skip>
            </configuration>
          </execution>
          <execution>
            <id>stop-container</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
            <configuration>
              <skip>${skipTests}</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <resourceIncludes>src/main/resources/**/*.properties</resourceIncludes>
        </configuration>
      </plugin>
    </plugins>
    
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>${basedir}/../../core/starter/src/main/resources</directory>
        <includes>
          <include>application.properties</include>
        </includes>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>${basedir}/../../core/persistence-jpa/src/main/resources</directory>
        <includes>
          <include>persistence.properties</include>
        </includes>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>${basedir}/../../core/persistence-jpa/src/test/resources/domains</directory>
        <targetPath>${project.build.outputDirectory}/domains</targetPath>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>${basedir}/../../core/spring/src/main/resources</directory>
        <includes>
          <include>security.properties</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
        <excludes>
          <exclude>keystore</exclude>
        </excludes>
      </testResource>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>false</filtering>
        <includes>
          <include>keystore</include>
        </includes>
      </testResource>
      <testResource>
        <directory>${basedir}/../../core/idm/logic/src/test/resources</directory>
        <includes>
          <include>test1.csv</include>
        </includes>
      </testResource>
      <testResource>
        <directory>${basedir}/../../core/rest-cxf/src/main/resources</directory>
        <includes>
          <include>errorMessages.properties</include>
        </includes>
      </testResource>
    </testResources>
  </build>
  
  <profiles>
    <profile>
      <id>zookeper-it</id>

      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <name>zookeeper:${zookeeper.version}</name>
                  <run>
                    <ports>
                      <port>2181:2181</port>
                    </ports>
                    <volumes>
                      <bind>
                        <volume>${project.build.directory}/test-classes/zoo.cfg:/conf/zoo.cfg</volume>
                        <volume>${project.build.directory}/test-classes/java.env:/conf/java.env</volume>
                        <volume>${project.build.directory}/test-classes/server-jaas.conf:/conf/server-jaas.conf</volume>
                        <volume>${project.build.directory}/test-classes/client-jaas.conf:/conf/client-jaas.conf</volume>
                      </bind>
                    </volumes>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start-zookeeper</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-zookeeper</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
          </plugin>
        </plugins>

        <testResources>
          <testResource>
            <directory>src/test/resources</directory>
            <filtering>true</filtering>
            <excludes>
              <exclude>keystore</exclude>
            </excludes>
          </testResource>
          <testResource>
            <directory>src/test/resources</directory>
            <filtering>false</filtering>
            <includes>
              <include>keystore</include>
            </includes>
          </testResource>
          <testResource>
            <directory>${basedir}/../../common/keymaster/client-zookeeper/src/main/resources</directory>
            <filtering>true</filtering>
          </testResource>
        </testResources>
      </build>
    </profile>

    <profile>
      <id>elasticsearch-it</id>
      
      <dependencies>
        <dependency>
          <groupId>org.apache.syncope.ext.elasticsearch</groupId>
          <artifactId>syncope-ext-elasticsearch-provisioning-java</artifactId>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.syncope.ext.elasticsearch</groupId>
          <artifactId>syncope-ext-elasticsearch-persistence-jpa</artifactId>
          <version>${project.version}</version>
        </dependency>
      </dependencies>
      
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <includes>
                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>
              </includes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <name>docker.elastic.co/elasticsearch/elasticsearch:${elasticsearch.version}</name>
                  <run>
                    <env>
                      <discovery.type>single-node</discovery.type>
                      <cluster.name>elasticsearch</cluster.name>
                      <xpack.security.enabled>false</xpack.security.enabled>
                    </env>
                    <ports>
                      <port>9200:9200</port>
                      <port>9300:9300</port>
                    </ports>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start-elasticsearch</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-elasticsearch</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
          </plugin>
        </plugins>
        
        <testResources>
          <testResource>
            <directory>src/test/resources</directory>
            <filtering>true</filtering>
            <excludes>
              <exclude>keystore</exclude>
            </excludes>
          </testResource>
          <testResource>
            <directory>src/test/resources</directory>
            <filtering>false</filtering>
            <includes>
              <include>keystore</include>
            </includes>
          </testResource>
          <testResource>
            <directory>${basedir}/../../core/rest-cxf/src/main/resources</directory>
            <includes>
              <include>errorMessages.properties</include>
            </includes>
          </testResource>
          <testResource>
            <directory>src/main/resources/elasticsearch</directory>
            <filtering>true</filtering>
          </testResource>
        </testResources>
      </build>
    </profile>
  
    <profile>
      <id>pgjsonb-it</id>

      <properties>
        <jdbcdriver.groupId>org.postgresql</jdbcdriver.groupId>
        <jdbcdriver.artifactId>postgresql</jdbcdriver.artifactId>
      </properties>

      <dependencies>
        <dependency>
          <groupId>org.apache.syncope.core</groupId>
          <artifactId>syncope-core-persistence-jpa-json</artifactId>
          <version>${project.version}</version>
        </dependency>
        
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>${jdbc.postgresql.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <defaultGoal>clean verify</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <configuration>
              <packagingExcludes>WEB-INF/classes/domains/Two*</packagingExcludes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <includes>
                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>
              </includes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <inherited>true</inherited>
            <executions>
              <execution>
                <id>remove-domain-Two</id>
                <phase>prepare-package</phase>
                <configuration>
                  <target>
                    <delete>
                      <fileset dir="${project.build.outputDirectory}/domains" includes="Two*"/>
                    </delete>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <alias>postgres</alias>
                  <name>postgres:${docker.postgresql.version}</name>
                  <run>
                    <env>
                      <POSTGRES_DB>syncope</POSTGRES_DB>
                      <POSTGRES_USER>syncope</POSTGRES_USER>
                      <POSTGRES_PASSWORD>syncope</POSTGRES_PASSWORD>
                    </env>
                    <wait>
                      <log>database system is ready to accept connections</log>
                      <time>30000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start-postgres</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-postgres</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <container>
                <systemProperties>
                  <DB_CONTAINER_IP>${docker.container.postgres.ip}</DB_CONTAINER_IP>
                </systemProperties>
              </container>
            </configuration>
          </plugin>
        </plugins>

        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <excludes>
              <exclude>provisioning.properties</exclude>
              <exclude>indexes.xml</exclude>
              <exclude>views.xml</exclude>
            </excludes>
          </resource>
          <resource>
            <directory>src/main/resources/pgjsonb</directory>
            <filtering>true</filtering>
          </resource>
          <resource>
            <directory>${basedir}/../../core/persistence-jpa-json/src/test/resources/domains</directory>
            <targetPath>${project.build.outputDirectory}/domains</targetPath>
            <filtering>true</filtering>
          </resource>
        </resources>
        <testResources>
          <testResource>
            <directory>${basedir}/../../core/persistence-jpa-json/src/main/resources/pgjsonb</directory>
            <includes>
              <include>persistence.properties</include>
              <include>indexes.xml</include>
              <include>views.xml</include>
            </includes>            
          </testResource>
        </testResources>
      </build>
    </profile>

    <profile>
      <id>postgres-it</id>

      <properties>
        <jdbcdriver.groupId>org.postgresql</jdbcdriver.groupId>
        <jdbcdriver.artifactId>postgresql</jdbcdriver.artifactId>
      </properties>

      <dependencies>
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>${jdbc.postgresql.version}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.bouncycastle</groupId>
          <artifactId>bcpkix-jdk15on</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.bouncycastle</groupId>
          <artifactId>bcprov-jdk15on</artifactId>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <defaultGoal>clean verify</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <includes>
                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>
              </includes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <alias>postgres</alias>
                  <name>postgres:${docker.postgresql.version}</name>
                  <run>
                    <env>
                      <POSTGRES_DB>syncope</POSTGRES_DB>
                      <POSTGRES_USER>syncope</POSTGRES_USER>
                      <POSTGRES_PASSWORD>syncope</POSTGRES_PASSWORD>
                    </env>
                    <wait>
                      <log>database system is ready to accept connections</log>
                      <time>30000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start-postgres</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-postgres</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <container>
                <systemProperties>
                  <DB_CONTAINER_IP>${docker.container.postgres.ip}</DB_CONTAINER_IP>
                </systemProperties>
              </container>
            </configuration>
          </plugin>
        </plugins>

        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <excludes>
              <exclude>provisioning.properties</exclude>
              <exclude>views.xml</exclude>
            </excludes>
          </resource>
          <resource>
            <directory>src/main/resources/postgres</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
        <!-- Views need to be customized, so the PostgreSQL-specific views.xml need to be copied to target/test-classes,
        e.g. the conf directory, in order to override classpath:views.xml -->
        <testResources>
          <testResource>
            <directory>src/main/resources/postgres</directory>
            <includes>
              <include>views.xml</include>
            </includes>            
          </testResource>
        </testResources>
      </build>
    </profile>

    <profile>
      <id>myjson-it</id>

      <properties>
        <jdbcdriver.groupId>mysql</jdbcdriver.groupId>
        <jdbcdriver.artifactId>mysql-connector-java</jdbcdriver.artifactId>
      </properties>

      <dependencies>
        <dependency>
          <groupId>org.apache.syncope.core</groupId>
          <artifactId>syncope-core-persistence-jpa-json</artifactId>
          <version>${project.version}</version>
        </dependency>
    
        <dependency>
          <groupId>mysql</groupId>
          <artifactId>mysql-connector-java</artifactId>
          <version>${jdbc.mysql.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <defaultGoal>clean verify</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <configuration>
              <packagingExcludes>WEB-INF/classes/domains/Two*</packagingExcludes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <includes>
                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>
              </includes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <inherited>true</inherited>
            <executions>
              <execution>
                <id>remove-domain-Two</id>
                <phase>prepare-package</phase>
                <configuration>
                  <target>
                    <delete>
                      <fileset dir="${project.build.directory}/classes/domains" includes="Two*"/>
                    </delete>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <alias>mysql</alias>
                  <name>mysql/mysql-server:${docker.mysql.version}</name>
                  <run>
                    <cmd>--skip-log-bin --server-id=1 --sort_buffer_size=348M</cmd>
                    <env>
                      <MYSQL_ROOT_PASSWORD>password</MYSQL_ROOT_PASSWORD>
                      <MYSQL_DATABASE>syncope</MYSQL_DATABASE>
                      <MYSQL_USER>syncope</MYSQL_USER>
                      <MYSQL_PASSWORD>syncope</MYSQL_PASSWORD>
                    </env>
                    <wait>
                      <log>MySQL init process done. Ready for start up.</log>
                      <time>30000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start-mysql</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-mysql</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <container>
                <systemProperties>
                  <DB_CONTAINER_IP>${docker.container.mysql.ip}</DB_CONTAINER_IP>
                </systemProperties>
              </container>
            </configuration>
          </plugin>
        </plugins>

        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <excludes>
              <exclude>provisioning.properties</exclude>
              <exclude>indexes.xml</exclude>
              <exclude>views.xml</exclude>
            </excludes>
          </resource>
          <resource>
            <directory>src/main/resources/myjson</directory>
            <filtering>true</filtering>
          </resource>
          <resource>
            <directory>${basedir}/../../core/persistence-jpa-json/src/test/resources/domains</directory>
            <targetPath>${project.build.directory}/classes/domains</targetPath>
            <filtering>true</filtering>
          </resource>
        </resources>
        <testResources>
          <testResource>
            <directory>${basedir}/../../core/persistence-jpa-json/src/main/resources/myjson</directory>
            <includes>
              <include>persistence.properties</include>
              <include>indexes.xml</include>
              <include>views.xml</include>
            </includes>            
          </testResource>
        </testResources>
      </build>
    </profile>

    <profile>
      <id>mysql-it</id>

      <properties>
        <jdbcdriver.groupId>mysql</jdbcdriver.groupId>
        <jdbcdriver.artifactId>mysql-connector-java</jdbcdriver.artifactId>
      </properties>

      <dependencies>
        <dependency>
          <groupId>mysql</groupId>
          <artifactId>mysql-connector-java</artifactId>
          <version>${jdbc.mysql.version}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.bouncycastle</groupId>
          <artifactId>bcpkix-jdk15on</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.bouncycastle</groupId>
          <artifactId>bcprov-jdk15on</artifactId>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <defaultGoal>clean verify</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <includes>
                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>
              </includes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <alias>mysql</alias>
                  <name>mysql/mysql-server:${docker.mysql.version}</name>
                  <run>
                    <cmd>--skip-log-bin --server-id=1 --sort_buffer_size=348M</cmd>
                    <env>
                      <MYSQL_ROOT_PASSWORD>password</MYSQL_ROOT_PASSWORD>
                      <MYSQL_DATABASE>syncope</MYSQL_DATABASE>
                      <MYSQL_USER>syncope</MYSQL_USER>
                      <MYSQL_PASSWORD>syncope</MYSQL_PASSWORD>
                    </env>
                    <wait>
                      <log>MySQL init process done. Ready for start up.</log>
                      <time>30000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start-mysql</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-mysql</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <container>
                <systemProperties>
                  <DB_CONTAINER_IP>${docker.container.mysql.ip}</DB_CONTAINER_IP>
                </systemProperties>
              </container>
            </configuration>
          </plugin>
        </plugins>

        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <excludes>
              <exclude>provisioning.properties</exclude>
            </excludes>
            <filtering>true</filtering>
          </resource>
          <resource>
            <directory>src/main/resources/mysql</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
      </build>
    </profile>
    
    <profile>
      <id>mariadb-it</id>

      <properties>
        <jdbcdriver.groupId>org.mariadb.jdbc</jdbcdriver.groupId>
        <jdbcdriver.artifactId>mariadb-java-client</jdbcdriver.artifactId>
      </properties>

      <dependencies>
        <dependency>
          <groupId>org.mariadb.jdbc</groupId>
          <artifactId>mariadb-java-client</artifactId>
          <version>${jdbc.mariadb.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <defaultGoal>clean verify</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <includes>
                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>
              </includes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <alias>mariadb</alias>
                  <name>mariadb:${docker.mariadb.version}</name>
                  <run>
                    <env>
                      <MYSQL_ROOT_PASSWORD>password</MYSQL_ROOT_PASSWORD>
                      <MYSQL_DATABASE>syncope</MYSQL_DATABASE>
                      <MYSQL_USER>syncope</MYSQL_USER>
                      <MYSQL_PASSWORD>syncope</MYSQL_PASSWORD>
                    </env>
                    <wait>
                      <log>MySQL init process done. Ready for start up.</log>
                      <time>30000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start-mariadb</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-mariadb</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <container>
                <systemProperties>
                  <DB_CONTAINER_IP>${docker.container.mariadb.ip}</DB_CONTAINER_IP>
                </systemProperties>
              </container>
            </configuration>
          </plugin>
        </plugins>

        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <excludes>
              <exclude>provisioning.properties</exclude>
            </excludes>
          </resource>
          <resource>
            <directory>src/main/resources/mariadb</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
      </build>
    </profile>
    
    <profile>
      <id>oracle-it</id>
      
      <properties>
        <jdbcdriver.groupId>com.oracle.database.jdbc</jdbcdriver.groupId>
        <jdbcdriver.artifactId>ojdbc10</jdbcdriver.artifactId>
        <cargo.deployable.ping.timeout>120000</cargo.deployable.ping.timeout>
      </properties>

      <dependencies>
        <dependency>
          <groupId>com.oracle.database.jdbc</groupId>
          <artifactId>ojdbc10</artifactId>
          <version>${jdbc.oracle.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <defaultGoal>clean verify</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <includes>
                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>
              </includes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <alias>oracle</alias>
                  <name>database-enterprise</name>
                  <build>
                    <dockerFileDir>${project.basedir}/src/main/resources/oracle</dockerFileDir>
                  </build>
                  <run>
                    <env>
                      <ORACLE_ALLOW_REMOTE>true</ORACLE_ALLOW_REMOTE>
                      <ORACLE_ENABLE_XDB>true</ORACLE_ENABLE_XDB>
                    </env>
                    <wait>
                      <log>Disconnected from Oracle Database 11g Express Edition</log>
                      <time>30000</time>
                    </wait>                
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>buid-oracle</id>
                <phase>initialize</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
              <execution>
                <id>start-oracle</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-oracle</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <container>
                <systemProperties>
                  <DB_CONTAINER_IP>${docker.container.oracle.ip}</DB_CONTAINER_IP>
                </systemProperties>
              </container>
            </configuration>
          </plugin>
        </plugins>

        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <excludes>
              <exclude>provisioning.properties</exclude>
            </excludes>
          </resource>
          <resource>
            <directory>src/main/resources/oracle</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
      </build>
    </profile>

    <profile>
      <id>sqlserver-it</id>
      
      <properties>
        <jdbcdriver.groupId>com.microsoft.sqlserver</jdbcdriver.groupId>
        <jdbcdriver.artifactId>mssql-jdbc</jdbcdriver.artifactId>
      </properties>

      <dependencies>
        <dependency>
          <groupId>com.microsoft.sqlserver</groupId>
          <artifactId>mssql-jdbc</artifactId>
          <version>${jdbc.mssql.version}11</version>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <defaultGoal>clean verify</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <includes>
                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>
              </includes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <alias>sqlserver</alias>
                  <name>mcmoe/mssqldocker:latest</name>
                  <run>
                    <env>
                      <ACCEPT_EULA>Y</ACCEPT_EULA>
                      <SA_PASSWORD>2astazeY</SA_PASSWORD>
                      <MSSQL_DB>syncope</MSSQL_DB>
                      <MSSQL_USER>syncope</MSSQL_USER>
                      <MSSQL_PASSWORD>Syncope123</MSSQL_PASSWORD>
                    </env>
                    <wait>
                      <log>MSSQL CONFIG COMPLETE</log>
                      <time>30000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start-sqlserver</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-sqlserver</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <container>
                <systemProperties>
                  <DB_CONTAINER_IP>${docker.container.sqlserver.ip}</DB_CONTAINER_IP>
                </systemProperties>
              </container>
            </configuration>
          </plugin>
        </plugins>

        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <excludes>
              <exclude>provisioning.properties</exclude>
              <exclude>views.xml</exclude>
            </excludes>
          </resource>
          <resource>
            <directory>src/main/resources/sqlserver</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
        <!-- Views need to be customized, so the SQL Server-specific views.xml need to be copied to target/test-classes,
        e.g. the conf directory, in order to override classpath:views.xml -->
        <testResources>
          <testResource>
            <directory>src/main/resources/sqlserver</directory>
            <includes>
              <include>views.xml</include>
            </includes>            
          </testResource>
        </testResources>
      </build>
    </profile>
    
    <!-- Running IT with this profile requires prior build of ../build-tools with -Ppayara -->
    <profile>
      <id>payara-it</id>

      <dependencies>
        <dependency>
          <groupId>org.apache.syncope.core</groupId>
          <artifactId>syncope-core-persistence-jpa</artifactId>
          <version>${project.version}</version>
          <exclusions>
            <exclusion>
              <groupId>org.apache.bval</groupId>
              <artifactId>bval-jsr</artifactId>
            </exclusion>
          </exclusions>
        </dependency>

        <dependency>
          <groupId>org.glassfish</groupId>
          <artifactId>jakarta.faces</artifactId>
          <version>${javax.faces.version}</version>
        </dependency>

        <dependency>
          <groupId>com.fasterxml.jackson.dataformat</groupId>
          <artifactId>jackson-dataformat-xml</artifactId>
        </dependency>
      </dependencies>

      <build>
        <defaultGoal>clean verify</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <container>
                <containerId>payara</containerId>
                <zipUrlInstaller>
                  <url>https://repo1.maven.org/maven2/fish/payara/distributions/payara/${payara.version}/payara-${payara.version}.zip</url>
                  <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>
                  <extractDir>${project.build.directory}/cargo/extract</extractDir>
                </zipUrlInstaller>
                <log>${cargo.log}</log>
                <output>${cargo.output}</output>
                <dependencies>
                  <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                  </dependency>
                </dependencies>
              </container>
              <configuration>
                <properties>
                  <cargo.glassfish.removeDefaultDatasource>false</cargo.glassfish.removeDefaultDatasource>
                  <cargo.jvmargs>-Dspring.profiles.active=embedded
                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx2048m -Xms1024m</cargo.jvmargs>
                </properties>
              </configuration>
              <deployables>
                <deployable>
                  <location>${basedir}/../build-tools/target/syncope-fit-build-tools-${project.version}</location>
                  <properties>
                    <context>syncope-fit-build-tools</context>
                  </properties>
                </deployable>
                <deployable>
                  <location>${project.build.directory}/${project.build.finalName}</location>
                  <pingURL>http://localhost:${cargo.servlet.port}/syncope/index.html</pingURL>
                  <pingTimeout>${cargo.deployable.ping.timeout}</pingTimeout>
                  <properties>
                    <context>syncope</context>
                  </properties>
                </deployable>
              </deployables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>wildfly-it</id>

      <dependencies>
        <dependency>
          <groupId>javax.xml.ws</groupId>
          <artifactId>jaxws-api</artifactId>
        </dependency>
        <dependency>
          <groupId>org.apache.cxf</groupId>
          <artifactId>cxf-core</artifactId>
          <version>${cxf.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.cxf</groupId>
          <artifactId>cxf-rt-transports-http</artifactId>
          <version>${cxf.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.cxf</groupId>
          <artifactId>cxf-rt-ws-policy</artifactId>
          <version>${cxf.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.cxf</groupId>
          <artifactId>cxf-rt-wsdl</artifactId>
          <version>${cxf.version}</version>
        </dependency>
        
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
        </dependency>
      </dependencies>

      <build>
        <defaultGoal>clean verify</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <container>
                <containerId>wildfly19x</containerId>
                <zipUrlInstaller>
                  <url>https://download.jboss.org/wildfly/${wildfly.version}/wildfly-${wildfly.version}.zip</url>
                  <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>
                  <extractDir>${project.build.directory}/cargo/extract</extractDir>
                </zipUrlInstaller>
                <log>${cargo.log}</log>
                <output>${cargo.output}</output>
                <dependencies>
                  <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                  </dependency>
                </dependencies>
              </container>
              <configuration>
                <properties>
                  <cargo.jvmargs>-Djava.net.preferIPv4Stack=true -Dspring.profiles.active=wildfly,embedded
                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx2048m -Xms1024m</cargo.jvmargs>
                </properties>
              </configuration>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>skipTests</id>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <skipTests>${skipTests}</skipTests>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>debug</id>

      <properties>
        <skipTests>true</skipTests>
      </properties>

      <build>
        <defaultGoal>clean verify cargo:run</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <configuration>
                <properties>
                  <cargo.jvmargs>
                    -Dspring.profiles.active=embedded
                    -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n
                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx1024m -Xms512m</cargo.jvmargs>
                </properties>
              </configuration>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- requires JAVA_HOME set to the latest JDK from https://github.com/TravaOpenJDK/trava-jdk-11-dcevm -->
    <profile>
      <id>hotswap</id>
      
      <properties>
        <skipTests>true</skipTests>
      </properties>
      
      <build>
        <defaultGoal>clean verify cargo:run</defaultGoal>

        <plugins>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <configuration>
                <properties>
                  <cargo.jvmargs>
                    -Dspring.profiles.active=embedded
                    -javaagent:${java.home}/lib/hotswap/hotswap-agent.jar=autoHotswap=true,disablePlugin=Spring,disablePlugin=Hibernate
                    -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000
                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>
                </properties>
              </configuration>
            </configuration>
          </plugin>
        </plugins>

        <resources>
          <resource>
            <directory>src/test/resources</directory>
            <filtering>true</filtering>
            <includes>
              <include>hotswap-agent.properties</include>
            </includes>
          </resource>
        </resources>
      </build>
    </profile>

    <profile>
      <id>all</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      
      <dependencies>
        <dependency>
          <groupId>org.apache.syncope.ext.flowable</groupId>
          <artifactId>syncope-ext-flowable-rest-cxf</artifactId>
          <version>${project.version}</version>
        </dependency>

        <dependency>
          <groupId>org.apache.syncope.ext.camel</groupId>
          <artifactId>syncope-ext-camel-rest-cxf</artifactId>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.syncope.ext.camel</groupId>
          <artifactId>syncope-ext-camel-persistence-jpa</artifactId>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.syncope.ext.camel</groupId>
          <artifactId>syncope-ext-camel-provisioning</artifactId>
          <version>${project.version}</version>
        </dependency>
        
        <dependency>
          <groupId>org.apache.syncope.ext.saml2sp</groupId>
          <artifactId>syncope-ext-saml2sp-rest-cxf</artifactId>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.syncope.ext.saml2sp</groupId>
          <artifactId>syncope-ext-saml2sp-persistence-jpa</artifactId>
          <version>${project.version}</version>
        </dependency>
        
        <dependency>
          <groupId>org.apache.syncope.ext.oidcclient</groupId>
          <artifactId>syncope-ext-oidcclient-rest-cxf</artifactId>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.syncope.ext.oidcclient</groupId>
          <artifactId>syncope-ext-oidcclient-persistence-jpa</artifactId>
          <version>${project.version}</version>
        </dependency>
        
        <dependency>
          <groupId>org.apache.syncope.ext.scimv2</groupId>
          <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.syncope.ext.scimv2</groupId>
          <artifactId>syncope-ext-scimv2-scim-rest-cxf</artifactId>
          <version>${project.version}</version>
        </dependency>
      </dependencies>
      
      <build>
        <plugins>
          <!-- Adds Flowable custom classes -->
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>add-flowable-custom-classes</id>
                <phase>initialize</phase>
                <goals>
                  <goal>add-source</goal>
                </goals>
                <configuration>
                  <sources>
                    <source>${basedir}/src/main/java-all</source>
                  </sources>
                </configuration>
              </execution>
            </executions>
          </plugin>                    
        </plugins>
        
        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <excludes>
              <exclude>workflow.properties</exclude>
              <exclude>provisioning.properties</exclude>
            </excludes>
          </resource>
          <resource>
            <directory>src/main/resources/all</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
      </build>
    </profile>
    
    <profile>
      <id>apache-release</id>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-deploy-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-source-plugin</artifactId>
            <inherited>false</inherited>
            <configuration>
              <skipSource>true</skipSource>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

  </profiles>
</project>
