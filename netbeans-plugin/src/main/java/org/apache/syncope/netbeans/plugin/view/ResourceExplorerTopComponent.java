/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.apache.syncope.netbeans.plugin.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.apache.commons.io.IOUtils;
import org.apache.syncope.common.lib.to.MailTemplateTO;
import org.apache.syncope.common.lib.to.ReportTemplateTO;
import org.apache.syncope.common.lib.types.MailTemplateFormat;
import org.apache.syncope.common.lib.types.ReportTemplateFormat;
import org.apache.syncope.netbeans.plugin.connector.ResourceConnector;
import org.apache.syncope.netbeans.plugin.constants.PluginConstants;
import org.apache.syncope.netbeans.plugin.service.MailTemplateManagerService;
import org.apache.syncope.netbeans.plugin.service.ReportTemplateManagerService;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.cookies.OpenCookie;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.loaders.DataObject;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.apache.syncope.netbeans.plugin//ResourceExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ResourceExplorerTopComponent",
        iconBase = "images/syncope.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.apache.syncope.netbeans.plugin.ResourceExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ResourceExplorerAction",
        preferredID = "ResourceExplorerTopComponent"
)
@Messages({
    "CTL_ResourceExplorerAction=Apache Syncope",
    "CTL_ResourceExplorerTopComponent=Apache Syncope",
    "HINT_ResourceExplorerTopComponent=This is a Apache Syncope window"
})
public final class ResourceExplorerTopComponent extends TopComponent {

    private DefaultTreeModel treeModel;
    private DefaultMutableTreeNode root;
    private DefaultMutableTreeNode mailTemplates;
    private DefaultMutableTreeNode reportXslts;
    private MailTemplateManagerService mailTemplateManagerService;
    private ReportTemplateManagerService reportTemplateManagerService;

    public ResourceExplorerTopComponent() {

        initComponents();
        setName(Bundle.CTL_ResourceExplorerTopComponent());
        setToolTipText(Bundle.HINT_ResourceExplorerTopComponent());

        treeModel = (DefaultTreeModel) resourceExplorerTree.getModel();
        root = (DefaultMutableTreeNode) treeModel.getRoot();
        mailTemplates = new DefaultMutableTreeNode(PluginConstants.MAIL_TEMPLTAE_CONSTANT);
        reportXslts = new DefaultMutableTreeNode(PluginConstants.REPORT_XSLTS_CONSTANT);

        root.add(mailTemplates);
        root.add(reportXslts);
        treeModel.reload();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resourceExplorerTree = new javax.swing.JTree();

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        resourceExplorerTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        resourceExplorerTree.setRootVisible(false);
        resourceExplorerTree.setScrollsOnExpand(true);
        resourceExplorerTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resourceExplorerTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resourceExplorerTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resourceExplorerTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resourceExplorerTreeMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) resourceExplorerTree.getLastSelectedPathComponent();
            DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();
            if (selectedNode.isLeaf()) {
                String name = (String) selectedNode.getUserObject();
                if (parentNode.getUserObject().equals(PluginConstants.MAIL_TEMPLTAE_CONSTANT)) {
                    try {
                        openMailEditor(name);
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                } else {
                    try {
                        openReportEditor(name);
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        } else if (evt.getButton() == MouseEvent.BUTTON3 && evt.getClickCount() == 1) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) resourceExplorerTree.getLastSelectedPathComponent();
            String selectedNodeName = (String) selectedNode.getUserObject();
            if (selectedNode.isLeaf()) {
                leafRightClickAction(evt, selectedNode);
            } else if (selectedNodeName.equals(PluginConstants.MAIL_TEMPLTAE_CONSTANT)) {
                folderRightClickAction(evt, mailTemplates);
            } else if (selectedNodeName.equals(PluginConstants.REPORT_XSLTS_CONSTANT)) {
                folderRightClickAction(evt, reportXslts);
            }
        }
    }//GEN-LAST:event_resourceExplorerTreeMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree resourceExplorerTree;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        File file = new File("UserData.txt");
        if (!file.exists()) {
            new LoginView(null, true).setVisible(true);
        }
        try {
            mailTemplateManagerService = ResourceConnector.getMailTemplateManagerService();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error Occured.", "Error", JOptionPane.ERROR_MESSAGE);
            new LoginView(null, true).setVisible(true);
        }
        try {
            reportTemplateManagerService = ResourceConnector.getReportTemplateManagerService();
        } catch (IOException ex) {
            new LoginView(null, true).setVisible(true);
        }

        addMailTemplates();
        addReportXslts();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void addMailTemplates() {
        List<MailTemplateTO> mailTemplates = mailTemplateManagerService.list();
        for (MailTemplateTO mailTemplate : mailTemplates) {
            this.mailTemplates.add(new DefaultMutableTreeNode(mailTemplate.getKey()));
        }
        treeModel.reload();
    }

    private void addReportXslts() {
        List<ReportTemplateTO> reportTemplates = reportTemplateManagerService.list();
        for (ReportTemplateTO reportTemplate : reportTemplates) {
            reportXslts.add(new DefaultMutableTreeNode(reportTemplate.getKey()));
        }
        treeModel.reload();
    }

    private void folderRightClickAction(final MouseEvent evt, final DefaultMutableTreeNode node) {
        JPopupMenu menu = new JPopupMenu();
        JMenuItem addItem = new JMenuItem("New");
        menu.add(addItem);

        addItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String name = JOptionPane.showInputDialog("Enter Name");
                boolean added = false;
                if (node.getUserObject().equals(PluginConstants.MAIL_TEMPLTAE_CONSTANT)) {
                    try {
                        MailTemplateTO mailTemplate = new MailTemplateTO();
                        mailTemplate.setKey(name);
                        added = mailTemplateManagerService.create(mailTemplate);
                        openMailEditor(name);
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                } else {
                    try {
                        ReportTemplateTO reportTemplate = new ReportTemplateTO();
                        reportTemplate.setKey(name);
                        added = reportTemplateManagerService.create(reportTemplate);
                        openReportEditor(name);
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }

                if (added) {
                    node.add(new DefaultMutableTreeNode(name));
                    treeModel.reload(node);
                } else {
                    JOptionPane.showMessageDialog(null, "Error while creating "
                            + "new element", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        menu.show(evt.getComponent(), evt.getX(), evt.getY());
    }

    private void leafRightClickAction(final MouseEvent evt, final DefaultMutableTreeNode node) {
        JPopupMenu menu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Delete");
        menu.add(deleteItem);

        deleteItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int result = JOptionPane.showConfirmDialog(null, "Do you want to delete ?");
                if (result == JOptionPane.OK_OPTION) {
                    DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
                    String name = (String) node.getUserObject();
                    boolean deleted;
                    if (parent.getUserObject().equals(PluginConstants.MAIL_TEMPLTAE_CONSTANT)) {
                        deleted = mailTemplateManagerService.delete((String) node.getUserObject());
                    } else {
                        deleted = reportTemplateManagerService.delete((String) node.getUserObject());
                    }
                    if (deleted) {
                        node.removeFromParent();
                        treeModel.reload(parent);
                    } else {
                        JOptionPane.showMessageDialog(null, "Error while deleting "
                                + "new element", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        });
        menu.show(evt.getComponent(), evt.getX(), evt.getY());
    }

    private void openMailEditor(String name) throws IOException {
        String type;
        String content;
        InputStream is;
        Object format = JOptionPane.showInputDialog(null, "Select File Format",
                "File format", JOptionPane.QUESTION_MESSAGE, null,
                PluginConstants.MAIL_TEMPLATE_FORMATS, "TEXT");

        if (format.equals("HTML")) {
            type = "html";
            is = (InputStream) mailTemplateManagerService.getFormat(name, MailTemplateFormat.HTML);
            content = IOUtils.toString(is);
        } else {
            type = "txt";
            is = (InputStream) mailTemplateManagerService.getFormat(name, MailTemplateFormat.TEXT);
            content = IOUtils.toString(is);
        }

        File directory = new File("Template");
        if (!directory.exists()) {
            directory.mkdir();
        }
        File file = new File("Template/" + name + "." + type);
        FileWriter fw = new FileWriter(file);
        fw.write(content);
        fw.flush();
        FileObject fob = FileUtil.toFileObject(file.getAbsoluteFile());
        DataObject data = DataObject.find(fob);
        OpenCookie cookie = (OpenCookie) data.getCookie(OpenCookie.class);
        cookie.open();
    }
    
    private void openReportEditor(String name) throws IOException {
        String type;
        String content;
        InputStream is;
        Object format = JOptionPane.showInputDialog(null, "Select File Format",
                "File format", JOptionPane.QUESTION_MESSAGE, null,
                PluginConstants.REPORT_TEMPLATE_FORMATS, "TEXT");

        if (format.equals("HTML")) {
            type = "html";
            is = (InputStream) reportTemplateManagerService.getFormat(name, ReportTemplateFormat.HTML);
            content = IOUtils.toString(is);
        } else if (format.equals("CSV")){
            type = "csv";
            is = (InputStream) reportTemplateManagerService.getFormat(name, ReportTemplateFormat.CSV);
            content = IOUtils.toString(is);
        }else{
            type = "fo";
            is = (InputStream) reportTemplateManagerService.getFormat(name, ReportTemplateFormat.FO);
            content = IOUtils.toString(is);
        }

        File directory = new File("Template");
        if (!directory.exists()) {
            directory.mkdir();
        }
        File file = new File("Template/" + name + "." + type);
        FileWriter fw = new FileWriter(file);
        fw.write(content);
        fw.flush();
        FileObject fob = FileUtil.toFileObject(file.getAbsoluteFile());
        DataObject data = DataObject.find(fob);
        OpenCookie cookie = (OpenCookie) data.getCookie(OpenCookie.class);
        cookie.open();
    }
}
